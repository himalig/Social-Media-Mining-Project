# -*- coding: utf-8 -*-
"""SMM-data-crawling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_m6fJAS7PPitddg-loeWFslOXRXr4Eg0
"""

# Commented out IPython magic to ensure Python compatibility.
import sys
if 'google.colab' in sys.modules:
#   %pip install Mastodon.py

import json
import networkx as nx
import matplotlib.pyplot as plt
import requests
from mastodon import Mastodon

mastodon = Mastodon(
    access_token='_YueCwcGg0x0YWhb-q_WZG72MW3cvu6nq7ZuBersbxw',
    api_base_url='https://mastodon.social'
)

from google.colab import drive
drive.mount('/content/drive')
# !cd /content/drive/MyDrive/CSE472SMM
# !ls

!pip install beautifulsoup4
from bs4 import BeautifulSoup
def beautify(content):
    finalcontent=""
    soup=BeautifulSoup(content,'html.parser')
    all_ptags=soup.find_all('p')
    for p_tag in all_ptags:
        finalcontent+=p_tag.get_text()
    return finalcontent

def add_parent_data(timeline):
    content=beautify(timeline['content'])
    toot={
        "post_id" : timeline['id'],
        "account_id" : timeline['account']['id'],
        "content" : content,
        "no_of_parents" : 0,
        "in_reply_to_id" : timeline['in_reply_to_id']
    }
    data[timeline['id']]=toot
    all_accounts.add(timeline['account']['id'])

def get_descendants(timeline):
    depth=mastodon.status_context(timeline['id'])['descendants']
    if len(depth)>4 and len(depth)<7:
        if timeline['in_reply_to_id']==None:
            add_parent_data(timeline)
            # network[timeline['account']['id']]={}
        # counter=1
            for d in depth:
                check_in_parent=d['in_reply_to_id']

                if check_in_parent in data:
                    parents=data[check_in_parent]["no_of_parents"]+1
                    # content=data[check_in_parent]["content"]+str(counter)+". "+d['content']
                    curr_content=beautify(d['content'])
                    final_content=data[check_in_parent]["content"]+" ::::::: "+curr_content

                    toots={
                        "post_id" : d['id'],
                        "account_id" : d['account']['id'],
                        "content" : final_content,
                        "no_of_parents" : parents,
                        "in_reply_to_id" : d['in_reply_to_id']
                    }
                    data[d['id']]=toots
                    # counter+=1
                    all_accounts.add(d['account']['id'])
                    acc=network.get(timeline['account']['id'],set())
                    acc.add(d['account']['id'])
                    network[timeline['account']['id']]=acc
            # else:

all_accounts=set()
network={}
data={}
hashtags=["instagramthreads","metathreads","threads","threadsapp"]
# hashtags=["threads"]
# hashtags=["instagramthreads","threads"]
for hashtag in hashtags:
    print(hashtag)
    max_id = None
    total=0
    while total < 60:
        timeline = mastodon.timeline_hashtag(hashtag, limit=40, max_id=max_id)
        if not timeline:
            break
        for tl in timeline:
            get_descendants(tl)
        total+=1
        max_id = timeline[-1]['id']
    print(len(data))

with open("/content/drive/MyDrive/CSE472SMM/network_new.json", "w") as json_file:
    json.dump(network, json_file, indent=4,default=str)

with open("/content/drive/MyDrive/CSE472SMM/threads_data.json", "w") as json_file:
    json.dump(data, json_file, indent=4)